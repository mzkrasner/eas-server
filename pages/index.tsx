import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState, useEffect } from "react";
import type { BasicProfile } from "@datamodels/identity-profile-basic";
import { CeramicClient } from "@ceramicnetwork/http-client";
import ceramicLogo from "../public/ceramic.png";
import { useCeramicContext } from "../context";
import { authenticateCeramic } from "../utils";
import styles from "../styles/Home.module.css";

const Home: NextPage = () => {
  const clients = useCeramicContext();
  const { ceramic, composeClient } = clients;
  const [profile, setProfile] = useState<BasicProfile | undefined>();
  const [hash, setHash] = useState("");
  const [loading, setLoading] = useState<boolean>(false);

  const handleLogin = async () => {
    await authenticateCeramic(ceramic, composeClient);
    await getProfile();
  };

  const getProfile = async () => {
    setLoading(true);
    if (ceramic.did !== undefined) {
      const profile = await composeClient.executeQuery(`
        query {
          viewer {
            basicProfile {
              id
              name
              description
              gender
              emoji
            }
          }
        }
      `);

      setProfile(profile?.data?.viewer?.basicProfile);
      setLoading(false);
    }
  };

  const createAttestationSchema = async () => {
    setLoading(true);
    if (ceramic.did !== undefined && hash.length) {
      const requestOptions = {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(hash),
      };
      fetch("/api/deploy", requestOptions)
        .then((response) => response.json())
        .then((data) => console.log(data));
      setLoading(false);
    }
  };

  const createAttestation = async () => {

    //all dummy data for subfields --> dynamic field is on line 66 to show dynamic creation of attestations
    const data = await composeClient.executeQuery(`
    mutation {
      create${'A' + hash.slice(2, hash.length)}(input: {
        content: {
          uid: "0x633f50e1d06eb2d888b17213f24214ecfbe842ce57bd64714e8636e782c0c67f" 
          schema: "0x633f50e1d06eb2d888b17213f24214ecfbe842ce57bd64714e8636e782c0c67f" 
          attestor: "0x514E3B94F0287cAf77009039B72C321Ef5F016E6"
          recipient: "0x514E3B94F0287cAf77009039B72C321Ef5F016E6"
          refUID: "0x633f50e1d06eb2d888b17213f24214ecfbe842ce57bd64714e8636e782c0c67f" 
          data: "0x633f50e1d06eb2d888b17213f24214ecfbe842ce57bd64714e8636e782c0c67f" 
        }
      }) 
      {
        document {
          id
          uid
          schema
          attestor
          recipient
        }
      }
    }
    `);
    console.log(data);
  };

  /**
   * On load check if there is a DID-Session in local storage.
   * If there is a DID-Session we can immediately authenticate the user.
   * For more details on how we do this check the 'authenticateCeramic function in`../utils`.
   */
  useEffect(() => {
    if (localStorage.getItem("did")) {
      handleLogin();
    }
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create ceramic app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Image
          src={ceramicLogo}
          width="100"
          height="100"
          className={styles.logo}
        />
        {profile === undefined && ceramic.did === undefined ? (
          <button
            onClick={() => {
              handleLogin();
            }}
          >
            Login
          </button>
        ) : (
          <div className={styles.form}>
            <div className={styles.formGroup}>
              <label>TxHash</label>
              <input
                type="text"
                defaultValue={profile?.name || ""}
                onChange={(e) => {
                  setHash(e.target.value);
                }}
              />
            </div>
            <div className={styles.buttonContainer}>
              <button
                onClick={() => {
                  createAttestationSchema();
                }}
              >
                {loading ? "Loading..." : "Create Schema"}
              </button>
            </div>
          </div>
        )}
        <button
          onClick={() => {
            createAttestation();
          }}
        >
          Create Attestation
        </button>
      </main>
    </div>
  );
};

export default Home;
